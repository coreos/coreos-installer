[package]
name = "coreos-installer"
repository = "https://github.com/coreos/coreos-installer"
license = "Apache-2.0"
edition = "2021"
rust-version = "1.58.0"
exclude = ["/.cci.jenkinsfile", "/.github", "/.gitignore", "/Dockerfile"]
authors = [ "Benjamin Gilbert <bgilbert@redhat.com>" ]
description = "Installer for Fedora CoreOS and RHEL CoreOS"
version = "0.16.1"

[package.metadata.release]
sign-commit = true
sign-tag = true
push = false
publish = false
pre-release-commit-message = "cargo: coreos-installer release {{version}}"
pre-release-hook = ["make", "docs", "clean"]
tag-message = "coreos-installer v{{version}}"

# See https://github.com/cgwalters/cargo-vendor-filterer
[package.metadata.vendor-filter]
# Right now the vendor filter doesn't support wildcards, so use this as a stand-in.
# xref https://github.com/cgwalters/cargo-vendor-filterer/issues/23
# Note that architecture-specific crate dependencies (apart from wasm32) are uncommon
# in the ecosystem, but this project actually does have s390x-specific dependencies (below).
platforms = ["x86_64-unknown-linux-gnu", "s390x-unknown-linux-gnu"]
all-features = true

[features]
# rdcore is only useful inside the initrd of a CoreOS system
rdcore = []
docgen = ["clap_mangen"]

[lib]
name = "libcoreinst"
path = "src/lib.rs"

[[bin]]
name = "coreos-installer"
path = "src/main.rs"

[[bin]]
name = "rdcore"
path = "src/bin/rdcore/main.rs"
required-features = ["rdcore"]

[profile.release]
# We assume we're being delivered via e.g. RPM which supports split debuginfo
debug = true

[dependencies]
anyhow = ">= 1.0.38, < 2"
base64 = "0.13"
bincode = "^1.3"
bytes = ">= 1.0.1, < 2"
byte-unit = ">= 3.1.0, < 5.0.0"
clap = { version = ">= 3.1, < 4", default-features = false, features = ["std", "cargo", "derive", "suggestions", "wrap_help"] }
clap_mangen = { version = "0.1", optional = true }
cpio = ">= 0.2.1, < 0.3"
flate2 = "^1.0"
glob = "^0.3"
# disable default-enabled cli in gptman 0.x
gptman = { version = ">= 0.7, < 2", default-features = false }
hex = "^0.4"
ignition-config = "0.2"
lazy_static = "^1.4"
libc = "^0.2"
mbrman = ">= 0.5, < 0.6"
nix = ">= 0.24, < 0.26"
nmstate = "2.1.2"
openssl = "^0.10"
pipe = ">= 0.3, < 0.5"
regex = ">= 1.4, < 2"
reqwest = { version = ">= 0.10, < 0.12", features = ["blocking"] }
serde = { version = "^1.0", features = ["derive"] }
serde_json = "^1.0"
serde_with = ">= 1.9.4, < 2"
serde_yaml = ">= 0.8, < 0.10"
tempfile = ">= 3.1, < 4"
textwrap = { version = ">= 0.15.0, < 0.17.0", default-features = false }
thiserror = "1.0"
url = ">= 2.1, < 3.0"
uuid = { version = ">= 0.8, < 2.0", features = ["v4"] }
walkdir = "^2.3"
xz2 = "^0.1"
zstd = { version = ">= 0.10.0, < 0.12.0", features = ["pkg-config"] }

[target.'cfg(target_arch = "s390x")'.dependencies]
rand = ">= 0.7, < 0.9"

[dev-dependencies]
maplit = "^1.0"

# In CoreOS CI we test installation from a compressed image created with
# `cosa compress --fast`.  This is unacceptably slow if the gunzip inner
# loops are compiled unoptimized.
[profile.dev.package.adler]
opt-level = 3
[profile.dev.package.crc32fast]
opt-level = 3
[profile.dev.package.miniz_oxide]
opt-level = 3

# If liblzma development headers aren't installed, lzma-sys builds its own
# copy of liblzma.  The unoptimized performance is okay but optimizing gives
# a ~2x improvement.
[profile.dev.package.lzma-sys]
opt-level = 3
